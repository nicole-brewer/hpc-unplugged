[["index.html", "HPC Unplugged: A lesson plan for teaching parallel and distributed computing in middle school Chapter 1 About 1.1 Problem and Motivation 1.2 Background and Related Work 1.3 Approach and Uniqueness", " HPC Unplugged: A lesson plan for teaching parallel and distributed computing in middle school Nicole Brewer 2022-10-07 Chapter 1 About Women and minorities are highly underrepresented in computing education and occupations. To combat this trend in computing, there has been sustained outreach efforts and after-school programs at the middle school level - at a time in which students are known to be forming their identity and establishing interests. These programs often use “unplugged” lessons to teach computational thinking without the use of code or computers. High-performance computing (HPC) involves the use of supercomputers to solve highly computation problems in science, engineering, math, and social science. A workforce with HPC expertise are highly sought after in academia, industry, and national labs, but women and minorities are even more underrepresented in this field than they are other computer and information technology occupations. This lesson was developed to teach parallel and distributed computing principles to middle school students in an informal setting. 1.1 Problem and Motivation High-Performance Computing (HPC) is a large market spanning industry, academia, and government. These markets are essential to US competitiveness and national security []. The broader research computing and data (RDC) workforce upholding this industry is composed of a wide variety of specialized technical profiles [RDC Workforce]. The recruitment and retention of RDC professionals has historically been challenging [Schidz] but is especially critical to address now that the workforce is aging out. [RDC 26]. Women in RDC are underrepresented in similar proportion to national computational and mathematical occupations, which may be due in part to women and other minorities feeling less included within the field. However, this representation worsens in systems-facing roles, software-facing roles [RDC]. We aim to address this underrepresentaion. 1.2 Background and Related Work Technical skills in Parallel and Distributed Computing (PDC) skills lie at the intersection of HPC and software-facing roles. Parallelism is a core competency of the CS2013 Curriculum Guidelines for Undergraduate Programs in Computer Science, but distributed computing is considered an elective. As such, undergraduate students are not prepared to face HPC systems in production [Banchelli]. There is currently no required exposure to these concepts at the high school or middle school level [need citation] but we know that identity formation is most critical for middle-school age groups [citation needed]. Thus there is impetus to develop a lesson plan to teach middle schoolers PDC concepts to middle school students at this critical time of identity development. 1.3 Approach and Uniqueness We present \"HPC Unplugged\", a PDC lesson plan that doesn't require the use of code or expertise of the instructor. It incorporates evidence-based teaching strategies and assessment tools to further the efficacy of the lesson, especially when it is delivered in an informal setting such as a summer camp or after-school program. Finally, this lesson plan incorporates real-life HPC application that espouses altruistic values and may connect with students on a personal level. "],["background.html", "Chapter 2 Background 2.1 Concepts", " Chapter 2 Background Computers are everywhere. Smart phones for instance, are a lot smaller than they used to be because the computers inside them got a lot smaller as engineers improved their design. In recent years, however, we have reached the physical limitations of how small a computer can be before it starts to melt when it gets used. So now instead of trying to make computers more smaller and faster, engineers build supercomputers which essentially are a lot of computers that work together to solve a task. Engineers might use supercomputers to simulate the aerodynamics of a fighter jet. Scientists use supercomputers to forecast the weather. Social scientists use supercomputers to analyse connections between users on Instagram. But using a supercomputer is not like using a desktop computer. Because supercomputers are made of of lot of smaller computers connected over a network, scientists have to learn how to break up their problem into smaller pieces and then integrate the results back into a larger picture. This lesson demonstrates why sometimes can be straight forward, and other times slows down the process to some degree. 2.1 Concepts Parallelism: Using additional computational resources simultaneously, usually for speedup [CS13] Distributed computing: Using additional computers simultaneously together over a network Performance: Measuring and tuning metrics - typically computer memory, time, and energy - to achieve speedup, efficiency, and scalability. "],["lesson-framework.html", "Chapter 3 Lesson Framework 3.1 Learning Objective 3.2 Materials 3.3 Introduction 3.4 Instructions 3.5 Learning Outcomes", " Chapter 3 Lesson Framework This page is for middle school teachers or subject experts doing outreach in informal settings such as after school programs. Prior knowledge of these computing concepts are not required. 3.1 Learning Objective Students will learn that it is faster to break down a large problem into smaller pieces and work in parallel to finish a task (parallelism). They will learn that when the task requires that they communicate with each other to complete it (distributed computing) that working together can be faster or slower depending how much time they spend communicating with each other (network). They will learn to balance these competing principles (optimization). 3.2 Materials This lesson only requires materials found in most classrooms including several matching sets of markers, crayons, or colored pencils. It also requires several pairs of scissors and tape dispensers. For a class of 30, you should need at least 15 pairs of markers, 4 pairs of scissors, and 4 tape dispensers. Color-by-number grids can be printed on regular 8.5 x 11, but they could also be constructed by a teacher if a printer was unavailable. 3.3 Introduction Computers are everywhere. Smart phones for instance, are a lot smaller than they used to be because the computers inside them got a lot smaller as engineers improved their design. In recent years, however, we have reached the physical limitations of how small a computer can be before it starts to melt when it gets used. So now instead of trying to make computers more smaller and faster, engineers build supercomputers which essentially are a lot of computers that work together to solve a task. Engineers might use supercomputers to simulate the aerodynamics of a fighter jet. Scientists use supercomputers to forecast the weather. Social scientists use supercomputers to analyse connections between users on Instagram. But using a supercomputer is not like using a desktop computer. Because supercomputers are made of of lot of computers connected over a network, scientists have to learn how to break up their problem into smaller pieces and then integrate the results back into a larger picture. This lesson demonstrates why this sometimes can be straight forward, and other times slows down the process to some degree. 3.4 Instructions Students can start the activity with a partner. Give each student a grid containing numbers, as shown below, and give each pair a timer (or let them use their phones) One student will color their grid by number. The other will be in charge of the timer and write down how long it takes for the other student to finish their grid. The idea of timing isn’t compare students to their peers, but rather to future iterations of this experiment. color by number grid 3.4.1 Parallelism Assessing student knowledge: students should break into groups of 4 - 6 students and discuss any pre-existing knowledge of related computer science terms such as serial, parallel, and distributed computing. Have one student from each group report to the class. Give students a pair of scissors and a set of markers for each student. If you don’t have enough marker sets to go around, groups can take turns timing each other. Let the students decide how to divide their grid among their group members. Think-pair-share: Ask the class a series of questions like “do you think it will take shorter or longer to finish the task when you can divide the work?”, “make a guess at how long it will take to complete the task when you can work together on it”, “does how you divide the work up change how quickly your group can complete the problem?”. A representative from each group can answer one of the questions. Show them how to make markings on the back of the grid to indicate where the grid pieces should fit back together when they have each completed their sub-graph. Let them mark and cut the graph into sub-graphs. Then record how long it takes for each group to color all their grids and paste them back together. 3.4.2 Distributed Computing Color-by-formula: Pass out a new grid to each student. This time, instead of coloring the cell by the number in it, students will color cells based on surrounding values. Specifically, they should color the grid cell according to the following formula. \\[ center = left + down - right - up \\] For the first run, let students pair up as they did in step one and time each other on serial completions of the graph. This will give them some practice with the formula before moving on to the most complicated iteration of this lesson. Open-ended questions: Ask the students they think will happen when they try and split up the distributed task? What is different about this set of rules that changes the way they approach the problem? There are several correct answers, but if the class isn’t catching on, ask more pointed questions. Will splitting up the problem go faster or slower? Does the they divvy up the problem change how quickly they can complete it? Distributed solution: Now let the students return to their groups. Let them divide their grid to their discretion as in the parallel case. Students again will work in parallel to finish the grid as quickly as possible. They will be able to complete the cells in the center just like when they practiced on their own but when they calculate the border, they will have to talk to their neighbor to obtain some of the numbers they need. Time each group to see how quickly they complete the task when working together, and compare this time to they made when working by themselves in step 3. 3.5 Learning Outcomes If students have achieved the above learning objective, their design for the distributed problem will be in the middle of a spectrum of two extremes: serial (one student assigned whole grid) and highly parallel (one student per grid square). When asked a series of open-ended questions about the design, they should be able to provide relevant motivations. That is, they should have a sense that both extremes are temporally costly, but that combining the two strategies takes advantage of parallelism but doesn’t require excess communication between sub-grids. If the students are extremely perceptive, they may suggest that this has to do with the proportion of shared-edge cells to total grid cells. "],["engagement.html", "Chapter 4 Engagement 4.1 Creating Grids 4.2 Narrative Standpoint 4.3 Current News 4.4 Future Work", " Chapter 4 Engagement 4.1 Creating Grids Grids can be created by using a short program in Jupyter Notebook. This program is available at https://github.com/nicole-brewer/color-by-number. It produces a blank grid with numbers, as well as an answer key like the one below. color by number answer key 4.2 Narrative Standpoint This lesson can take advantage of a narrative format by incorporating pictures into the grids the students will fill in. These pictures will naturally be in the style of 8-bit art often found in old video games. 4.2.1 Example Let’s say we are using this activity at an after-school program in Arizona. We can start the first activity by introducing the main character; maybe a girl since women are in a vast minority in computing fields. This girl is taking a walk through the desert. She comes upon a little creature eating seeds for the moisture they contain. What creature is it? The first grid will be a picture of the kangaroo rat. Next, she comes across a creature with large pointy ears. The second grid will show a kit fox. Then she comes across something rustling, she points her flashlight in the direction of the noise that makes her jump! This grid is a picture of a tarantula, which can live to be up to 20 years old. 4.3 Current News Supercomputers have recently been used to forecast wildfires in California (https://www.top500.org/news/hpc-modeling-used-to-help-fight-california-wildfires/). Just like weather forecasts, this kind of forecasting takes a lot more processing power than a laptop computer. The forecasting software help firefighters monitor wildfires and guide evacuations. Grid cells for this lesson could modified to model wildfire. 4.4 Future Work In the future, it is my goal to wrap this program with a user interface so that instructors without coding experience can upload images that can be pixelated into the grids students will color for this activity. Until then, grids can be encoded manually using a two-dimensional list. "],["adaption.html", "Chapter 5 Adaption 5.1 Virtual Classroom Adaption 5.2 Online Game Adaption", " Chapter 5 Adaption 5.1 Virtual Classroom Adaption This game could be used in a classroom setting by assigning small groups to breakout rooms where one of the students could walk through the steps of the game. At each step, the students could discuss their optimization strategy. A student could be assigned to take notes about their reasoning in a shared Google doc. Another student could share those notes in a group discussion when they exit their breakout sessions and return to the larger group discussion. This way every student in a group of four has a role of active participation during the lesson. The downside of the virtual approach is that not all the students get to control the game execution (though an instructor might suggest that they can choose to play again on their own after the lesson). However, every student in each group has a role to play in their breakout groups, so they will still be difficult for them to avoid active participation. 5.2 Online Game Adaption This lesson could be turned into an individual online game. The student could be responsible for “painting” a grid the right color through a series of clicks. For the parallel example, the student could decide where and how many ways to divide the grid into subsections. They would then be timed for only one subsection, and the computer would autofill the other sections for them. They could try different configurations in order to design the fastest time. For the distributed example, the student would have to click a button to scan the adjacent grid. They would check for the number they need and then hold that number in memory or on paper. They could then click a button to flip back to the subgrid they are working on and calculate the number/color they need to fill in edge cell. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
